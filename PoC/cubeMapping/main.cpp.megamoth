#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <math.h>
#include "png.hpp"

// Comme nous allons travailler simultanément sur cinq heightmaps en même temps,
// nous stockons tout ce dont nous avons besoin dans une structure.
//
typedef struct heighmap {
  // Le tableau simulant une matrice contenant le tampon de base que l'on avait
  // déjà utilisé dans le PoC du StampNoise
  float * stamp;

  // La taille de chaque faces.
  int scale;

  // max et min correspondent à la hauteur minimale et maximale sur tout le cube.
  float max;
  float min;

  // Un tableau en contenant six autres, simulant une matrice et contenant chacune de
  // nos faces du cube.
  float * faces[6];

  // Pour une face donnée il faut lui associer des faces voisines.
  // Chacun des quatres pointeur contient donc une référence vers une face voisine.
  float * top;
  float * left;
  float * right;
  float * bottom;
} HEIGHTMAP;

unsigned long int getRandom() {
  timespec tStruct;
  clock_gettime(CLOCK_REALTIME, &tStruct);
  return tStruct.tv_nsec;
}

// Le générateur de tampon
void UNIVERSE_STAMP_1(float * matrix, int scale) {
  int x,y,X=0;
  double halfScale = scale / 2 ;
  double radius;

  int * powersOfTwo = (int *) malloc( sizeof(int) * scale);

  // On crée deux tables contenants les valeurs élevées à la puissance de deux.
  // On calcule ainsi n fois ces valeurs au lieu de n².
  for(x=0; x<scale;x++) {
    powersOfTwo[x] = (x-halfScale) * (x-halfScale);
  }

  // Plutôt que d'incrémenter d'une unité x et calculer la position du point courant 
  // dans le tableau en multipliant par scale, on incrémente directement x par scale. La formule
  // pour retrouver le point courant n'est plus 
  // 
  // x*scale +y 
  //
  // mais 
  //
  // x+y
  //
  // Il faut donc également penser à changer la valeur limite de la première boucle
  int limit = scale*scale;
  for(x=0;x<limit;x+=scale) {
    for(y=0;y<scale;y++) {
      // On calcule le rayon du cercle sur lequel se trouve le point courant.
      // Opération très TRÈS gourmante en temps CPU
      radius = sqrtl( powersOfTwo[y] + powersOfTwo[X]);
      if ( radius < halfScale ) {
        // y a plus qu'à dessiner le cône.
	matrix[x+y] = (halfScale - radius) / (halfScale);
      }
      else {
        // Si on est en dehors du cercle, on se casse pas la tête et on affecte un zero.
	matrix[x+y] = 0;
      }
    }
    //Comme x est incrémenté par scale, et qu'on doit quand même accéder à notre tableau powersOfTwo...
    X++;
  }
  free(powersOfTwo);
}

void UNIVERSE_NOISE_1( HEIGHTMAP * heightmap, int scale, int offsetX, int offsetY, int faceId) {
  if (scale == 1) {
    return;
  }

  char doIt = getRandom() & 1;
  float sign = getRandom() & 2 ? 1.0 : -1.0;
  int halfScale = scale >> 1;
  int randX = - halfScale + getRandom() % (scale);
  int randY = - halfScale + getRandom() % (scale);
  int inc = heightmap->scale / scale;
  int stampIndex;
  int faceIndex;
  int stampX=0,stampY=0;
	

  float * dest;

  // Quand le tampon est contenu exactement à l'intérieur d'une face
  if ((randY+offsetY >= 0 && randY+offsetY+scale-1 < heightmap->scale) && (randX+offsetX >= 0 && randX+offsetX+scale-1< heightmap->scale)) {
    for(int y=0; y<scale;y++) {
      stampX = 0;
      for(int x=0; x<scale;x++) {
        stampIndex = stampX + scale * stampY;
	if( heightmap->stamp[stampIndex] != 0) {
	  faceIndex = (y+randY+offsetY) * heightmap->scale + x+randX+offsetX;
	  heightmap->faces[faceId][faceIndex] += sign * heightmap->stamp[stampIndex] / inc;
	  if (heightmap->max < heightmap->faces[faceId][ faceIndex]) {
	    heightmap->max = heightmap->faces[faceId][ faceIndex ];
	  }
	  if (heightmap->min <= 0 && heightmap->min > heightmap->faces[faceId][ faceIndex ]) {
	    heightmap->min = heightmap->faces[faceId][ faceIndex ];
	  }
	}
	stampX += inc;
      }
      stampY += (inc * inc);
    }
  } 

  // Quand le tampon dépasse sur l'axe X
  else if ( !(randX+offsetX >= 0 && randX+offsetX+scale-1 < heightmap->scale) && ( randY+offsetY >= 0 && randY+offsetY+scale-1 < heightmap->scale  )) {
    for(int y=0; y<scale;y++) {
      stampX = 0;
      for(int x=0; x<scale;x++) {
        stampIndex = stampX + scale * stampY;
	if( heightmap->stamp[stampIndex] != 0) {
	  if (randX+offsetX+x < 0) {
	    dest = heightmap->left;
	    if (faceId == 1) {
	      faceIndex = ( heightmap->scale - (y+randY+offsetY) ) * heightmap->scale - (x+randX+offsetX)-1;
	    }
	    else if (faceId == 2) {
	      faceIndex = -(x+randX+offsetX + 1) * heightmap->scale +(y+randY+offsetY);
	    }
	    else if (faceId == 3) {
	      faceIndex = ( heightmap->scale + x+randX+offsetX - 1) * heightmap->scale + heightmap->scale - 1 - (y+randY+offsetY);
	    }
	    else if (faceId == 4) {
	      faceIndex = (y+randY+offsetY) * heightmap->scale + heightmap->scale + (x+randX+offsetX);
	    }
	    else if (faceId == 5) {
	      faceIndex = ( heightmap->scale - (y+randY+offsetY) - 1) * heightmap->scale - (x+randX+offsetX)-1;
	    }
	    else {
	      faceIndex = (y+randY+offsetY) * heightmap->scale + heightmap->scale + (x+randX+offsetX);
	    }
	  }
	  else if ( randX+offsetX+x >= heightmap->scale ) {
	    dest = heightmap->right;
	    if (faceId == 1) {
	      faceIndex = (heightmap->scale - (y+randY+offsetY)) * heightmap->scale + heightmap->scale - ((x+randX+offsetX) - heightmap->scale) - 1;
	    }
	    else if (faceId == 2) {
	      faceIndex = ((x+randX+offsetX) - heightmap->scale)* heightmap->scale + heightmap->scale - (y+randY+offsetY);
	    }
	    else if (faceId == 3) {
	      faceIndex = ( heightmap->scale - ((x+randX+offsetX) - heightmap->scale) - 1)* heightmap->scale + (y+randY+offsetY);
	    }
	    else if (faceId == 4) {
	      faceIndex = ( heightmap->scale - (y+randY+offsetY) ) * heightmap->scale + heightmap->scale - ((x+randX+offsetX) - heightmap->scale) - 1;
	    }
	    else if (faceId == 5) {
	      faceIndex = (y+randY+offsetY) * heightmap->scale + (x+randX+offsetX) - heightmap->scale;
            }
	    else {
	      faceIndex = (y+randY+offsetY) * heightmap->scale + x+randX+offsetX - heightmap->scale;
	    }
	  }
	  else {
	    dest = heightmap->faces[faceId];
	    faceIndex = ((y+randY+offsetY)) * heightmap->scale + x+randX+offsetX;
	  }
	  dest[ faceIndex] += sign * heightmap->stamp[stampIndex] / inc ;
	  if (heightmap->max < dest[ faceIndex]) {
	    heightmap->max = dest[ faceIndex ];
	  }
	  if (heightmap->min <= 0 && heightmap->min > dest[ faceIndex ]) {
	    heightmap->min = dest[ faceIndex ];
	  }
	}
	stampX += inc;
      }
      stampY += inc * inc;
    }
  }
  // Quand le tampon dépasse sur l'axe Y
  else if ((randX+offsetX >= 0 && randX+offsetX+scale-1 < heightmap->scale) && !( randY+offsetY >= 0 && randY+offsetY+scale-1 < heightmap->scale  )) {
    for(int y=0; y<scale;y++) {
      stampX = 0;
      for(int x=0; x<scale;x++) {
        stampIndex = stampX + scale * stampY;
	if( heightmap->stamp[stampIndex] != 0) {
	  if (randY+offsetY+y < 0) {
	    dest = heightmap->top;
	    if ( faceId == 4) {
	      faceIndex = ( heightmap->scale + (y+randY+offsetY)) + heightmap->scale * ( heightmap->scale - (x+randX+offsetX));
	    }
	    else if ( faceId == 5) {
	      faceIndex = (x+randX+offsetX) * heightmap->scale - 1 - y-randY-offsetY;
	    }
	    else {
	      faceIndex = (heightmap->scale + (y+randY+offsetY)) * heightmap->scale + x+randX+offsetX;
	    }
	  }
	  else if (randY+offsetY+y >= heightmap->scale) {
	    dest = heightmap->bottom;
	    if ( faceId == 4 ) {
	      faceIndex = - (y+randY+offsetY) - 1 + (heightmap->scale * ( scale - x+randX+offsetX) );
	    }
	    else if(faceId == 5) {
	      faceIndex = (y+randY+offsetY - heightmap->scale) + heightmap->scale * (heightmap->scale -x-randX-offsetX);
	    }
	    else {
	      faceIndex = (y+randY+offsetY - heightmap->scale) * heightmap->scale + x+randX+offsetX;
	    }
	  }
	  else {
	    dest = heightmap->faces[faceId];
	    faceIndex = ((y+randY+offsetY)) * heightmap->scale + x+randX+offsetX;
	  }
	  dest[ faceIndex] += sign * heightmap->stamp[stampIndex] / inc ;
	  if (heightmap->max < dest[ faceIndex]) {
	    heightmap->max = dest[ faceIndex ];
	  }
	  if (heightmap->min <= 0 && heightmap->min > dest[ faceIndex ]) {
	    heightmap->min = dest[ faceIndex ];
	  }
	}
	stampX += inc;
      }
      stampY += (inc * inc);
    }
  }

  UNIVERSE_NOISE_1(heightmap, halfScale, offsetX, 		offsetY,		faceId);
  UNIVERSE_NOISE_1(heightmap, halfScale, offsetX, 		offsetY+halfScale,	faceId);
  UNIVERSE_NOISE_1(heightmap, halfScale, offsetX+halfScale, 	offsetY+halfScale,	faceId);
  UNIVERSE_NOISE_1(heightmap, halfScale, offsetX+halfScale, 	offsetY,		faceId);
}

void MERGE_EDGES(HEIGHTMAP * heightmap, int scale, int faceId) {
  // On parcoure les quatres segments composants la face courante en une seule itération
  // On ne touche pas aux sommet du carré pour le moment, ils seront traités séparément.
  // En fait les sommets de la face courrante seront le résultat de la moyenne des sommets voisins
  // en un point donné.
  
  float average;
  for(int i = 1; i <scale - 1; i++ ) {
    if(faceId == 0) { // plusZ
      // Segment supérieur
      average = (heightmap->faces[0][i] + heightmap->top[i + scale * (scale-1)]) / 2;
      heightmap->faces[0][i] = average;
      heightmap->top[i + scale * (scale-1)] = average;

      // Segment inférieur
      average = (heightmap->faces[0][i + scale * (scale-1)] + heightmap->bottom[i]) / 2;
      heightmap->faces[0][i + scale * (scale-1)] = average;
      heightmap->bottom[i] = average;

      // Segment gauche
      average = (heightmap->faces[0][ scale * i ] + heightmap->left[i * scale + scale - 1]) / 2;
      heightmap->faces[0][i * scale] = average;
      heightmap->left[i * scale + scale - 1] = average;

      // Segment droit
      average = (heightmap->right[ scale * i ] + heightmap->faces[0][i * scale + scale - 1]) / 2;
      heightmap->right[i * scale] = average;
      heightmap->faces[0][i * scale + scale - 1] = average;
    }
    else if (faceId == 1) {
      // Segment supérieur
      average = (heightmap->faces[1][i] + heightmap->top[i + scale * (scale-1)]) / 2;
      heightmap->faces[1][i] = average;
      heightmap->top[i + scale * (scale-1)] = average;
      
      // Segment inférieur
      average = (heightmap->faces[1][i + scale * (scale-1)] + heightmap->bottom[i]) / 2;
      heightmap->faces[1][i + scale * (scale-1)] = average;
      heightmap->bottom[i] = average;

      // Segment gauche
      average = (heightmap->faces[1][ scale * i ] + heightmap->left[- i * scale + scale * (scale - 1)]) / 2;
      heightmap->faces[1][ scale * i ] = average;
      heightmap->left[- i * scale + scale * (scale - 1)] = average;

      // Segment droit
      average = (heightmap->faces[1][ scale - 1 + scale * i ] + heightmap->right[scale - 1 - i * scale + scale * (scale - 1)]) / 2;
      heightmap->faces[1][scale - 1 + scale * i] = average;
      heightmap->right[ scale - 1 - i * scale + scale * (scale-1)] = average;
    }

    else if (faceId == 2) {
      // Segment gauche
      average = (heightmap->faces[2][ scale * i ] + heightmap->left[i]) / 2;
      heightmap->faces[2][i * scale] = average;
      heightmap->left[i] = average;

      // Segment droit
      average = (heightmap->faces[2][ scale - 1 + scale * i ] + heightmap->right[scale - 1 - i]) / 2;
      heightmap->faces[2][scale - 1 + i * scale] = average;
      heightmap->right[ scale - 1 - i ] = average;
    }

    else if (faceId == 3) {
      // Segment gauche
      average = (heightmap->faces[3][ scale * i ] + heightmap->left[ scale * (scale-1) + scale - 1 - i]) / 2;
      heightmap->faces[3][i * scale] = average;
      heightmap->left[scale * (scale -1) + scale - 1 - i] = average;

      // Segment droit
      average = (heightmap->faces[3][ scale - 1 + scale * i ] + heightmap->right[i + scale * (scale-1)]) / 2;
      heightmap->faces[3][scale - 1 + i * scale] = average;
      heightmap->right[ i + scale * (scale-1) ] = average;
      
    }
  }

  // On calcule maintenant la moyenne des sommets
  // Le traitement de deux faces suffit pour faire huit fois la moyenne de trois sommets.
  // En l'occurence il faut que ces faces soient opposées

  if (faceId == 0) { // plusZ
    // Sommet supérieur gauche
    average = (heightmap->faces[0][0] + heightmap->top[ scale * (scale-1)] + heightmap->left[scale-1]) / 3;
    heightmap->faces[0][0] = average;
    heightmap->top[ scale * (scale-1)] = average;
    heightmap->left[scale-1] = average;

    // Sommet supérieur droit
    average = (heightmap->faces[0][scale-1] + heightmap->top[ (scale-1) + scale * (scale-1)] + heightmap->right[0]) / 3;
    heightmap->faces[0][scale-1] = average;
    heightmap->top[ (scale-1) + scale * (scale-1)] = average;
    heightmap->right[0] = average;

    // Sommet inférieur droit
    average = (heightmap->faces[0][scale-1 + scale * (scale-1)] + heightmap->bottom[ scale-1 ] + heightmap->right[ scale * (scale-1)]) / 3;
    heightmap->faces[0][ (scale-1) * scale + scale - 1 ] = average;
    heightmap->bottom[ scale-1 ] = average;
    heightmap->right[ scale * (scale-1) ] = average;

    // Sommet inférieur gauche
    average = (heightmap->faces[0][scale * (scale-1)] + heightmap->bottom[ 0 ] + heightmap->left[ scale * (scale-1) + scale - 1]) / 3;
    heightmap->faces[0][ (scale-1) * scale ] = average;
    heightmap->bottom[0]  = average;
    heightmap->left[ scale - 1 + scale * (scale-1) ] = average;
  }

  else if (faceId == 1) { // minusZ
    // Sommet supérieur gauche
    average = (heightmap->faces[1][0] + heightmap->top[ scale * (scale-1)] + heightmap->left[scale * (scale-1)]) / 3;
    heightmap->faces[1][0] = average;
    heightmap->top[ scale * (scale-1)] = average;
    heightmap->left[ (scale-1) * scale] = average;

    // Sommet supérieur droit
    average = (heightmap->faces[1][scale-1] + heightmap->top[ scale - 1 + scale * (scale-1)] + heightmap->right[scale - 1 + scale * (scale-1)]) / 3;
    heightmap->faces[1][scale-1] = average;
    heightmap->top[ scale - 1 + scale * (scale-1)] = average;
    heightmap->right[ scale - 1 + (scale-1) * scale] = average;

    // Sommet inférieur droit
    average = (heightmap->faces[1][scale-1 + scale * (scale-1)] + heightmap->bottom[scale-1] + heightmap->right[scale-1]) / 3;
    heightmap->faces[1][scale-1 + scale * (scale-1)] = average;
    heightmap->bottom[scale-1] = average;
    heightmap->right[scale-1] = average;

    // Sommet inférieur gauche
    average = (heightmap->faces[1][scale * (scale-1)] + heightmap->bottom[0] + heightmap->left[0]) / 3;
    heightmap->faces[1][scale * (scale-1)] = average;
    heightmap->bottom[0] = average;
    heightmap->left[0] = average;
  }
}

int main(int argc, char ** argv) {
  if (argc == 1) {
    std::cout << "Usage: ./heighMap <power of two>\n";
    return 0;
  }

  HEIGHTMAP heightmap;
  heightmap.max = 0;
  heightmap.min = 0;
  heightmap.scale = atoi(argv[1]);
  PIXEL ** png = (PIXEL **) malloc(sizeof(PIXEL *) * heightmap.scale * 3);
  heightmap.stamp = (float *) malloc(sizeof(float) * heightmap.scale * heightmap.scale);

  // On initialise les six faces du cube.
  heightmap.faces[0]	= (float *) malloc(sizeof(float) * heightmap.scale * heightmap.scale);
  heightmap.faces[1]	= (float *) malloc(sizeof(float) * heightmap.scale * heightmap.scale);
  heightmap.faces[2]	= (float *) malloc(sizeof(float) * heightmap.scale * heightmap.scale);
  heightmap.faces[3]	= (float *) malloc(sizeof(float) * heightmap.scale * heightmap.scale);
  heightmap.faces[4]	= (float *) malloc(sizeof(float) * heightmap.scale * heightmap.scale);
  heightmap.faces[5]	= (float *) malloc(sizeof(float) * heightmap.scale * heightmap.scale);

  for (int x =0; x < heightmap.scale * 3 ; x++) {
    png[x] = (PIXEL *) malloc(sizeof(PIXEL) * heightmap.scale * 4);
  }

  // On fait en sorte que chaque face soit vierge
  for(int y = 0; y<heightmap.scale; y++) {
    for(int x = 0; x<heightmap.scale; x++) {
      heightmap.faces[0][x + heightmap.scale*y]	= 0;
      heightmap.faces[1][x + heightmap.scale*y]	= 0;
      heightmap.faces[2][x + heightmap.scale*y]	= 0;
      heightmap.faces[3][x + heightmap.scale*y]	= 0;
      heightmap.faces[4][x + heightmap.scale*y]	= 0;
      heightmap.faces[5][x + heightmap.scale*y]	= 0;
    }
  }
  
  int X=0,Y=0;
  float test;
  float hyp = (heightmap.scale * 0.5) / 0.7071 ;

  // On crée un tampon
  UNIVERSE_STAMP_1(heightmap.stamp, heightmap.scale);

  // Pour chaque face qu'on va traiter, il faut déterminer les faces voisines.

  heightmap.top = heightmap.faces[2];
  heightmap.bottom = heightmap.faces[3];
  heightmap.left = heightmap.faces[5];
  heightmap.right = heightmap.faces[4];
  UNIVERSE_NOISE_1(&heightmap, heightmap.scale, 0, 0, 0);

  heightmap.top = heightmap.faces[3];
  heightmap.bottom = heightmap.faces[2];
  heightmap.left = heightmap.faces[5];
  heightmap.right = heightmap.faces[4];
  UNIVERSE_NOISE_1(&heightmap, heightmap.scale, 0, 0, 1);

  heightmap.top = heightmap.faces[1];
  heightmap.bottom = heightmap.faces[0];
  heightmap.left = heightmap.faces[5];
  heightmap.right = heightmap.faces[4];
  UNIVERSE_NOISE_1(&heightmap, heightmap.scale, 0, 0, 2);
	
  heightmap.top = heightmap.faces[0];
  heightmap.bottom = heightmap.faces[1];
  heightmap.left = heightmap.faces[5];
  heightmap.right = heightmap.faces[4];
  UNIVERSE_NOISE_1(&heightmap, heightmap.scale, 0, 0, 3);

  heightmap.top = heightmap.faces[2];
  heightmap.bottom = heightmap.faces[3];
  heightmap.left = heightmap.faces[0];
  heightmap.right = heightmap.faces[1];
  UNIVERSE_NOISE_1(&heightmap, heightmap.scale, 0, 0, 4);

  heightmap.top = heightmap.faces[2];
  heightmap.bottom = heightmap.faces[3];
  heightmap.left = heightmap.faces[1];
  heightmap.right = heightmap.faces[0];
  UNIVERSE_NOISE_1(&heightmap, heightmap.scale, 0, 0, 5);

  // Cela étant fait il faut racorder chacune des faces. En effet, en l'état, 
  // si les heighmaps sont appliquées à la sphére projetée il y aura des défauts
  // de jointures entre chacune des faces du cube.

  heightmap.top = heightmap.faces[0];
  heightmap.bottom = heightmap.faces[1];
  heightmap.left = heightmap.faces[5];
  heightmap.right = heightmap.faces[4];
  MERGE_EDGES(&heightmap, heightmap.scale, 3);

  heightmap.top = heightmap.faces[1];
  heightmap.bottom = heightmap.faces[0];
  heightmap.left = heightmap.faces[5];
  heightmap.right = heightmap.faces[4];
  MERGE_EDGES(&heightmap, heightmap.scale, 2);

  // Maintenant que nous avons calculé deux faces opposées, tous les sommets sont bon.
  // Huits segments sur douze sont également calculés.
  
  heightmap.top = heightmap.faces[3];
  heightmap.bottom = heightmap.faces[2];
  heightmap.left = heightmap.faces[5];
  heightmap.right = heightmap.faces[4];
  MERGE_EDGES(&heightmap, heightmap.scale, 1);

  heightmap.top = heightmap.faces[2];
  heightmap.bottom = heightmap.faces[3];
  heightmap.left = heightmap.faces[5];
  heightmap.right = heightmap.faces[4];
  MERGE_EDGES(&heightmap, heightmap.scale, 0);


  int scale4 = heightmap.scale * 4;
  int scale3 = heightmap.scale * 3;
  int scale2 = heightmap.scale * 2;
  unsigned char color;

  // Assemblages des six heightmaps dans l'image png de sortie
    for(int y = 0; y<scale4; y++) {
      for(int x = 0; x<scale3; x++) {
        if (x >= heightmap.scale && x < scale2 && y >= heightmap.scale && y < scale2) { // plusZ
	  color = (unsigned char) (255 * (heightmap.faces[0][ (x-heightmap.scale) + heightmap.scale*(y-heightmap.scale)] - heightmap.min) / (heightmap.max - heightmap.min));
	  png[x][y].Red	= color;
	  png[x][y].Green = color;
	  png[x][y].Blue = color;
	}
	else if (x >= heightmap.scale && x < scale2 && y >= 0 && y < heightmap.scale) { // plusY
	  color = (unsigned char) (255 * (heightmap.faces[2][ (x-heightmap.scale) + heightmap.scale*y] - heightmap.min) / (heightmap.max - heightmap.min));
	  png[x][y].Red	= color;
	  png[x][y].Green = color;
	  png[x][y].Blue = color;
	}
	else if (x >= heightmap.scale && x < scale2 && y >= scale2 && y < scale3) { // minusY
	  color = (unsigned char) (255 * (heightmap.faces[3][ (x-heightmap.scale) + heightmap.scale*(y-scale2)] - heightmap.min) / (heightmap.max- heightmap.min));
	  png[x][y].Red	= color;
	  png[x][y].Green = color;
	  png[x][y].Blue = color;
	}
	else if (x >= heightmap.scale && x < scale2 && y >= scale3 && y < scale4) { // minusZ
	  color = (unsigned char) (255 * (heightmap.faces[1][ (x-heightmap.scale) + heightmap.scale*(y-scale3)] - heightmap.min) / (heightmap.max- heightmap.min));
	  png[x][y].Red = color; 
	  png[x][y].Green	= color;
	  png[x][y].Blue = color;
	}
	else if (x >= 0 && x < heightmap.scale && y >= heightmap.scale && y < scale2) { // minuxX
	  color = (unsigned char) (255 * (heightmap.faces[5][ x + heightmap.scale*(y-heightmap.scale)] - heightmap.min) / (heightmap.max- heightmap.min));
	  png[x][y].Red = color; 
	  png[x][y].Green	= color;
	  png[x][y].Blue = color;
	}
	else if (x >= scale2 && x < scale3 && y >= heightmap.scale && y < scale2) { // plusX
	  color =  (unsigned char) (255 * (heightmap.faces[4][ (x-scale2) + heightmap.scale*(y-heightmap.scale)] - heightmap.min) / (heightmap.max- heightmap.min));
	  png[x][y].Red = color; 
	  png[x][y].Green	= color;
	  png[x][y].Blue = color;
	}
	else {
	  png[x][y].Red = 0; 
	  png[x][y].Green	= 255;
	  png[x][y].Blue = 0;
	}
	png[x][y].Alpha	= 255;
      }
    }

    writePng(png,heightmap.scale);
	
    return 0;
}
